#############################################################################################################################################################################
# This is a minimal working example of running Palmr with HTTPS behind Traefik as a reverse proxy.                                                                          #
# Do NOT change anything in this docker-compose file (except possibly the volume mounts for MinIO and Postgres).                                                            #
# You can of course enable some flags in traefik like staging certificates to check if the deployment and provisioning of the certificates work                             #
#     - However - if you try to do this, Palmr wont load, because Palmr itself does not trust the staging certificates. You will only see the Let's Encrypt Staging         #
#       Certificate in the browser window - BUT THE WEBSITE WILL FAIL TO LOAD ANYTHING                                                                                      #
# Generally, you only need to change the predefined variables in the .env file, which should be in the same folder as this docker-compose.yml file.                         #
# Make sure that your domains are resolvable and point to the server where this Docker stack will run.                                                                      #
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# Credits:                                                                                                                                                                  #
#   Palmr by Kyantech (https://github.com/kyantech/palmr)                                                                                                                   #
#   Docker Compose example assembled by Charly (https://github.com/PunchEnergyFTW)
#############################################################################################################################################################################
services:
  traefik:
    image: "traefik"
    container_name: "traefik"
    command:
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
#- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entryPoints.websecure.transport.respondingTimeouts.readTimeout=0s"
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_MYRESOLVER_ACME_EMAIL=${TRAEFIK_ACME_EMAIL} 
      - PALMR_HOST=${TRAEFIK_APP_URL}
      - MINIO_HOST=${TRAEFIK_SERVER_IP}
      #- MAX_BODY_SIZE=${TRAEFIK_MAX_BODY_SIZE}
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"


  palmr-api:
    image: kyantech/palmr-api@sha256:3e9fbc9a680888970f8450c9ba567bc293eb28d286727929d540646a8a50d392 # Pinned to version which has been tested with this setup
    container_name: palmr-api
    depends_on:
      postgres:
        condition: "service_healthy"
      minio:
        condition: "service_healthy"
    environment:
      - PORT=${API_INTERNAL_PORT:-3333} # Port for the backend service
      - DATABASE_URL=postgresql://postgres:${POSTGRESQL_PASSWORD:-postgresRootPassword}@postgres:5432/palmr_db?schema=public # Database URL with configurable password through POSTGRESQL_PASSWORD env var
      - MINIO_ENDPOINT=${SERVER_IP:-localhost} # This can change if your MinIO is at a different address
      - MINIO_PORT=${MINIO_INTERNAL_API_PORT:-6421} # Default MinIO port (Change if yours is not the default)
      - MINIO_USE_SSL=true # MinIO uses SSL by default, but you can change it to true if needed
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio_root_user} # MinIO credentials can be configured through MINIO_ROOT_USER env vars
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioRootPassword} # MinIO credentials can be configured through MINIO_ROOT_PASSWORD env vars
      - MINIO_REGION=sa-east-1 # MinIO region - This is needed for MinIO to work properly
      - MINIO_BUCKET_NAME=files # MinIO bucket name - This is needed for MinIO to work properly, dont change it if you don't know what you are doing
      - FRONTEND_URL=${APP_URL:-http://${SERVER_IP:-localhost}:${APP_EXTERNAL_PORT:-5487} # Frontend URL - Make sure to use the correct frontend URL, depends on where the frontend is running, its prepared for localhost, but you can change it to your frontend URL if needed
      - SERVER_IP=${SERVER_IP:-localhost} # Server IP - Make sure to use the correct server IP if you running on a cloud provider or a virtual machine. This prepared for localhost, but you can change it to your server IP if needed
      - MAX_FILESIZE=${MAX_FILESIZE:-1073741824} # Max Filesize for upload - Declared in Bytes. Default is 1GiB
    expose: 
      - "${API_INTERNAL_PORT:-3333}" # Backend port mapping 
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_INTERNAL_PORT:-3333}/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  palmr-app:
    image: kyantech/palmr-app@sha256:9db38016d52f5fe8450494b4aab8902856ef0588cd03e83b06b789e64a8dbdc2 # Pinned to version which has been tested with this setup
    container_name: palmr-web
    depends_on:
      palmr-api:
        condition: "service_healthy"
    expose:
      - "${APP_EXTERNAL_PORT:-5487}" # Frontend port mapping
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - API_BASE_URL=http://palmr-api:${API_INTERNAL_PORT:-3333} # Here we use docker's internal network to reference the backend service (can be changed if needed)
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://127.0.0.1:5487"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.palmr.rule=Host(`${PALMR_HOST}`)"
      - "traefik.http.routers.palmr.entrypoints=websecure"
      - "traefik.http.routers.palmr.tls.certresolver=myresolver"

  postgres:
    image: bitnami/postgresql:17.2.0 # You can use any postgres version you prefer, but remember that some versions might not be compatible
    container_name: palmr-postgres
    environment:
      # PostgreSQL credentials configurable through environment variables
      # POSTGRESQL_USERNAME, POSTGRESQL_PASSWORD, and POSTGRES_DB can be set to override defaults
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME:-postgres}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-postgresRootPassword}
      - POSTGRESQL_DATABASE=${POSTGRES_DATABASE:-palmr_db}
    volumes:
      - postgres_data:/bitnami/postgresql
    expose:
      - "5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "palmr"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z # Use only version RELEASE.2025-03-12T18-04-18Z to avoid compatibility issues with the backend
    container_name: minio
    environment:
      # MinIO credentials - same as above, configurable through environment variables
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio_root_user}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioRootPassword}
      - MINIO_SITE_REGION=sa-east-1
      ### Traefik Settings - Do not change unless you know what you're doing
      - VIRTUAL_HOST=${SERVER_IP} #WebURL for Traefik
      - LETSENCRYPT_HOST=${SERVER_IP} #WebURL for which Letsencrypt will generate a Certificate
      - VIRTUAL_PORT=${MINIO_INTERNAL_API_PORT:-6421}
    command: server /data --address ":${MINIO_INTERNAL_API_PORT:-6421}" --console-address ":${MINIO_INTERNAL_CONSOLE_PORT:-6422}"
    volumes:
      - minio_data:/data
    expose:
      - "${MINIO_INTERNAL_API_PORT:-6421}"
      - "${MINIO_INTERNAL_CONSOLE_PORT:-6422}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_INTERNAL_API_PORT:-6421}/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_HOST}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certresolver=myresolver"
      - "traefik.http.middlewares.minio-buffers.buffering.maxRequestBodyBytes=${TRAEFIK_MAX_BODY_SIZE}"

  minio-init:
    image: minio/mc:RELEASE.2025-03-12T17-29-24Z # Use only version RELEASE.2025-03-12T17-29-24Z to avoid compatibility issues with the backend and MinIO
    container_name: minio-init
    depends_on:
      minio:
        condition: "service_healthy"
    restart: "no"
    # The entrypoint script will create a bucket called "files" and set it to be publicly readable using the MinIO client (mc).
    entrypoint: >
      sh -c "
        sleep 5 &&
        mc alias set myminio http://minio:${MINIO_INTERNAL_API_PORT:-6421} ${MINIO_ROOT_USER:-minio_root_user} ${MINIO_ROOT_PASSWORD:-minioRootPassword} &&
        mc mb myminio/files --ignore-existing &&
        mc anonymous set download myminio/files
      "

volumes:
  minio_data:
  postgres_data:
